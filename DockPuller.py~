#Written in python3#
#Daniel Vinakovsky#

import json
import urllib.parse
import urllib.request
import sys
import multiprocessing
import time

class DocketPuller:
        #TODO: change key names and upload to Crimson Hexagon
        def __init__(self,APIKEY,docketID):
                self.APIKEY   = APIKEY
                self.docketID = docketID
                self.baseURL  = "http://api.data.gov:80/regulations/v3/documents.json?api_key="+APIKEY
        
        def getCommentPage(self,countsonly,rpp,po):
                url     = self.baseURL + "&countsOnly="+str(countsonly)+"&encoded=0&dktid="+self.docketID+"&rpp="+str(rpp)+"&po="+str(po)
                req     = urllib.request.Request(url)
                req.add_header("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
                req.add_header("User-Agent","Mozilla/5.0")
                try:
                        response = urllib.request.urlopen(req)
                        contents = response.read()
                except urllib.error.HTTPError as error:
                        contents = error.read()
                return contents

        def getTotalNumComments(self):
                kvdict = json.loads(self.getCommentPage(1,25,0).decode())
                self.numcomments = kvdict["totalNumRecords"]
                return self.numcomments
                
        def getAllComments(self):
                numcomments  = self.getTotalNumComments()
                commentslist = []
                for po in range(int((numcomments/1000)+2)):
                        commentslist.append(self.fixNames(self.getCommentPage(0,1000,po)))
                        print(str(po)+"/"+str(1+int(numcomments/1000)))
                self.commentslist = commentslist
                return commentslist

        def fixNames(self,commentpg):
                dictlist = json.loads(commentpg.decode())
                dictlist.pop("totalNumRecords",None)
                for comment in dictlist["documents"]:
                        documentId          = comment.pop("documentId",None)
                        comment["author"]   = comment.pop("title",None)[13:] 
                        comment["date"]     = comment.pop("postedDate",None)[0:19]
                        comment["contents"] = comment.pop("commentText",None)
                        comment["url"]      = "http://www.regulations.gov/#!documentDetail;D="+documentId
                        comment["title"]    = documentId
                        comment["language"] = "en"
                        comment["type"]     = "FILL ME WITH ASSIGNED CONTENT TYPE NAME"
                        comment.pop("agencyAcronym",None)
                        comment.pop("allowLateComment",None)
                        comment.pop("attachmentCount",None)
                        comment.pop("commentDueDate",None)
                        comment.pop("commentStartDate",None)
                        comment.pop("docketTitle",None)
                        comment.pop("docketType",None)
                        comment.pop("documentStatus",None)
                        comment.pop("documentType",None)
                        comment.pop("numberOfCommentReceived",None)
                        comment.pop("openForComment",None)
                        comment.pop("rin",None)
                        comment.pop("totalNumRecords",None)
                return json.dumps(dictlist)

def runner():
        if len(sys.argv) != 2:
                print("Usage: python3 dockpull.py <DOCKETID>")
                quit()
        dp = DocketPuller("oV2HKbIr6qkHLXI6uj2HsZN4Z9K2OfbsPfzvk8UI","FDA-2014-N-0189")
        commentslist = dp.getAllComments()
        print("Done!")
        #fout = open("comments_out.json","w")
        #fout.write(''.join(commentslist))
        #fout.close()

        #print(sys.argv[1])
        #DocumentIDs = getDocumentIDs(sys.argv[1])
        #pool = multiprocessing.Pool(10)
        #for docid in DocumentIDs:
        #    pool.apply_async(func=getComment,args=(docid, ),callback=logComment)
        #pool.close()
        #pool.join()
        #print(len(COMLOG))
        #pool.map(printComment,DocumentIDs)

runner()
